use UNIVER;

-- #1
SELECT
	MIN(AUDITORIUM.AUDITORIUM_CAPACITY) [Min_Capacity],
	MAX(AUDITORIUM.AUDITORIUM_CAPACITY) [Max_Capacity],
	AVG(AUDITORIUM.AUDITORIUM_CAPACITY) [Average_Capacity],
	SUM(AUDITORIUM.AUDITORIUM_CAPACITY) [Total_Capacity],
	COUNT(*) [Auditorium_Count]
FROM AUDITORIUM;

-- #2
SELECT
	AUDITORIUM_TYPE.AUDITORIUM_TYPENAME,
	MAX(AUDITORIUM.AUDITORIUM_CAPACITY) [Max_Capacity],
	MIN(AUDITORIUM.AUDITORIUM_CAPACITY) [Min_Capacity],
	AVG(AUDITORIUM.AUDITORIUM_CAPACITY) [Average_Capacity],
	SUM(AUDITORIUM.AUDITORIUM_CAPACITY) [Total_Capacity],
	COUNT(AUDITORIUM.AUDITORIUM_TYPE) [Total_Count]
FROM AUDITORIUM
JOIN AUDITORIUM_TYPE ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE
GROUP BY AUDITORIUM_TYPE.AUDITORIUM_TYPENAME;

-- #3
SELECT *
FROM (
	SELECT 
		CASE
			when (PROGRESS.NOTE = 10) then '10'
			when (PROGRESS.NOTE IN (8, 9)) then '8-9'
			when (PROGRESS.NOTE IN (6, 7)) then '6-7'
			when (PROGRESS.NOTE IN (4, 5)) then '4-5'
		END [Notes],
		COUNT(*) [Count]
	FROM PROGRESS
	GROUP BY
		CASE
			when (PROGRESS.NOTE = 10) then '10'
			when (PROGRESS.NOTE IN (8, 9)) then '8-9'
			when (PROGRESS.NOTE IN (6, 7)) then '6-7'
			when (PROGRESS.NOTE IN (4, 5)) then '4-5'
		END
) AS T
ORDER BY
	CASE [Notes]
		when '10' then 1
		when '8-9' then 2
		when '6-7' then 3
		when '4-5' then 4
		else 0
	END;

-- #4
SELECT
	FACULTY.FACULTY,
	GROUPS.PROFESSION,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM FACULTY
JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
GROUP BY
	FACULTY.FACULTY,
	GROUPS.PROFESSION
ORDER BY [Average_Note];

SELECT
	FACULTY.FACULTY,
	GROUPS.PROFESSION,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM FACULTY
JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE PROGRESS.SUBJECT_T IN ('Œ¿Ëœ', '—”¡ƒ')
GROUP BY
	FACULTY.FACULTY,
	GROUPS.PROFESSION
ORDER BY [Average_Note];

-- #5
SELECT
	FACULTY.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM FACULTY
JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = '’“Ë“'
GROUP BY ROLLUP(GROUPS.PROFESSION, FACULTY.FACULTY, PROGRESS.SUBJECT_T);

-- #6
SELECT
	FACULTY.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM FACULTY
JOIN GROUPS ON FACULTY.FACULTY = GROUPS.FACULTY
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE FACULTY.FACULTY = '’“Ë“'
GROUP BY CUBE(GROUPS.PROFESSION, FACULTY.FACULTY, PROGRESS.SUBJECT_T);

-- #7
SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON STUDENT.IDGROUP = GROUPS.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '»“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T

UNION

SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON STUDENT.IDGROUP = GROUPS.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '’“Ë“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T
ORDER BY [Average_Note] DESC;


-- UNION ALL

SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON STUDENT.IDGROUP = GROUPS.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '»“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T

UNION ALL

SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON STUDENT.IDGROUP = GROUPS.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '’“Ë“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T
ORDER BY [Average_Note] DESC;

-- #8
SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '»“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T

INTERSECT

SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '’“Ë“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T
ORDER BY [Average_Note] DESC;

-- #9
SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '»“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T

INTERSECT

SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '’“Ë“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T

EXCEPT

SELECT
	GROUPS.FACULTY,
	GROUPS.PROFESSION,
	PROGRESS.SUBJECT_T,
	ROUND(AVG(CAST(PROGRESS.NOTE AS float(2))), 2) [Average_Note]
FROM GROUPS
JOIN STUDENT ON GROUPS.IDGROUP = STUDENT.IDGROUP
JOIN PROGRESS ON STUDENT.IDSTUDENT = PROGRESS.IDSTUDENT
WHERE GROUPS.FACULTY = '»“'
GROUP BY GROUPS.FACULTY, GROUPS.PROFESSION, PROGRESS.SUBJECT_T
ORDER BY [Average_Note] DESC;

-- #10
SELECT DISTINCT
	a.SUBJECT_T,
	(
		SELECT COUNT(*)
		FROM PROGRESS b
		WHERE a.SUBJECT_T = b.SUBJECT_T
			AND b.NOTE IN (8, 9)
	) [Count]
FROM PROGRESS a
GROUP BY a.SUBJECT_T, a.NOTE
HAVING a.NOTE IN (8, 9)
ORDER BY [Count] DESC;